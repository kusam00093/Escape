<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.escape.mapper.PackageMapper">  


<!-- <select id="getPackageList"> -->
<!-- WITH AverageRates AS ( -->
<!--     SELECT  -->
<!--         pa.package_idx, -->
<!--         AVG(ra.rate) AS rate -->
<!--     FROM  -->
<!--         package_tb pa -->
<!--     JOIN  -->
<!--         package_review_tb r ON pa.package_idx = r.package_idx -->
<!--     JOIN  -->
<!--         package_rate_tb ra ON r.package_review_idx = ra.package_review_idx -->
<!--     GROUP BY  -->
<!--         pa.package_idx -->
<!-- ), -->
<!-- ReviewCounts AS ( -->
<!--     SELECT  -->
<!--         pa.package_idx, -->
<!--         COUNT(*) AS count -->
<!--     FROM  -->
<!--         package_tb pa -->
<!--     JOIN  -->
<!--         package_review_tb r ON pa.package_idx = r.package_idx -->
<!--     JOIN  -->
<!--         person_tb p ON r.person_idx = p.person_idx -->
<!--     JOIN  -->
<!--         package_rate_tb ra ON r.package_review_idx = ra.package_review_idx -->
<!--     GROUP BY  -->
<!--         pa.package_idx -->
<!-- ), -->
<!-- PackageImages AS ( -->
<!--     SELECT  -->
<!--         PACKAGE_IDX, -->
<!--         IMAGE, -->
<!--         ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN -->
<!--     FROM  -->
<!--         PACKAGE_IMAGE_TB -->
<!-- ), -->
<!-- PackageLocations AS ( -->
<!--     SELECT  -->
<!--         pl.package_idx, -->
<!--         l.name AS location_name, -->
<!--         ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn -->
<!--     FROM  -->
<!--         package_location_tb pl -->
<!--     JOIN  -->
<!--         location_tb l ON pl.location_idx = l.location_idx -->
<!-- ), -->
<!-- PackageCategories AS ( -->
<!--     SELECT  -->
<!--         PC.PACKAGE_IDX, -->
<!--         C.NAME AS CATEGORY_NAME, -->
<!--         ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN -->
<!--     FROM  -->
<!--         CATEGORY_TB C -->
<!--     JOIN  -->
<!--         PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX -->
<!-- ) -->
<!-- SELECT  -->
<!--     P.PACKAGE_IDX, -->
<!--     P.USER_IDX, -->
<!--     P.TITLE, -->
<!--     P.START_DATE, -->
<!--     P.END_DATE, -->
<!--     P.LIMITED_PERSON, -->
<!--     P.PRICE, -->
<!--     P.PTYPE_IDX, -->
<!--     P.HIT, -->
<!--     P.PACKAGE_CATEGORY_IDX, -->
<!--     PI.IMAGE, -->
<!--     AR.rate, -->
<!--     RC.count, -->
<!--     PL.location_name, -->
<!--     PCAT.category_name, -->
<!--     PD.DISCOUNT_PERCENT, -->
<!--     PD.DISCOUNT_INTEGER, -->
<!--     ROUND(COALESCE(( (100.0 - PD.DISCOUNT_PERCENT)/100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price, -->
<!--     P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0) AS remaining_person -->
<!-- FROM  -->
<!--     PACKAGE_TB P -->
<!-- LEFT JOIN  -->
<!--     PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1 -->
<!-- LEFT JOIN  -->
<!--     AverageRates AR ON P.PACKAGE_IDX = AR.package_idx -->
<!-- LEFT JOIN  -->
<!--     ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx -->
<!-- LEFT JOIN  -->
<!--     (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx -->
<!-- LEFT JOIN  -->
<!--     (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX -->
<!-- LEFT JOIN  -->
<!--     PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX -->
<!-- LEFT JOIN  -->
<!--     ( -->
<!--         SELECT  -->
<!--             package_idx,  -->
<!--             COUNT(package_reservation_idx) AS reserved_count -->
<!--         FROM  -->
<!--             package_reservation_tb -->
<!--         GROUP BY  -->
<!--             package_idx -->
<!--     ) PR ON P.PACKAGE_IDX = PR.package_idx -->



<!-- </select> -->

<select id="getPackageList">
WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
),
BookmarkState AS (
    SELECT 
        P.PACKAGE_IDX,
        COALESCE(MAX(CASE WHEN ppb.user_idx = #{user_idx} THEN ppb.state ELSE 0 END), 0) AS state
    FROM 
        PACKAGE_TB P
    LEFT JOIN 
        package_bookmark_tb ppb ON P.PACKAGE_IDX = ppb.package_idx
    GROUP BY 
        P.PACKAGE_IDX
)
SELECT 
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.PTYPE_IDX,
    P.HIT,
    P.CREATED,
    P.PACKAGE_CATEGORY_IDX,
    PI.IMAGE,
    AR.rate,
    RC.count,
    PL.location_name,
    PCAT.category_name,
    PD.DISCOUNT_PERCENT,
    PD.DISCOUNT_INTEGER,
    ROUND(COALESCE(( (100.0 - PD.DISCOUNT_PERCENT)/100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price,
    P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0) AS remaining_person,
    BS.state  
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX
LEFT JOIN 
    PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX
LEFT JOIN 
    (
        SELECT 
            package_idx, 
            SUM(reservation_su) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR ON P.PACKAGE_IDX = PR.package_idx
LEFT JOIN 
    BookmarkState BS ON P.PACKAGE_IDX = BS.PACKAGE_IDX

</select>


<select id="getPackageListCount">

WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
),
BookmarkState AS (
    SELECT 
        P.PACKAGE_IDX,
        COALESCE(MAX(CASE WHEN ppb.user_idx = #{user_idx} THEN ppb.state ELSE 0 END), 0) AS state
    FROM 
        PACKAGE_TB P
    LEFT JOIN 
        package_bookmark_tb ppb ON P.PACKAGE_IDX = ppb.package_idx
    GROUP BY 
        P.PACKAGE_IDX
)
SELECT 
    COUNT(*)
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX
LEFT JOIN 
    PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX
LEFT JOIN 
    (
        SELECT 
            package_idx, 
            SUM(reservation_su) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR ON P.PACKAGE_IDX = PR.package_idx
LEFT JOIN 
    BookmarkState BS ON P.PACKAGE_IDX = BS.PACKAGE_IDX

</select>

<select id="getPackageListPaging">
WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
),
BookmarkState AS (
    SELECT 
        P.PACKAGE_IDX,
        COALESCE(MAX(CASE WHEN ppb.user_idx = #{arg0} THEN ppb.state ELSE 0 END), 0) AS state
    FROM 
        PACKAGE_TB P
    LEFT JOIN 
        package_bookmark_tb ppb ON P.PACKAGE_IDX = ppb.package_idx
    GROUP BY 
        P.PACKAGE_IDX
)
SELECT 
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.PTYPE_IDX,
    P.HIT,
    P.CREATED,
    P.PACKAGE_CATEGORY_IDX,
    PI.IMAGE,
    AR.rate,
    RC.count,
    PL.location_name,
    PCAT.category_name,
    PD.DISCOUNT_PERCENT,
    PD.DISCOUNT_INTEGER,
    ROUND(COALESCE(( (100.0 - PD.DISCOUNT_PERCENT)/100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price,
    P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0) AS remaining_person,
    BS.state  
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX
LEFT JOIN 
    PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX
LEFT JOIN 
    (
        SELECT 
            package_idx, 
            SUM(reservation_su) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR ON P.PACKAGE_IDX = PR.package_idx
LEFT JOIN 
    BookmarkState BS ON P.PACKAGE_IDX = BS.PACKAGE_IDX
OFFSET #{arg1} ROWS FETCH NEXT #{arg2} ROWS ONLY

</select>









<select id="getRemainPerson">
SELECT
    COALESCE(P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0), 0) AS remaining_person
FROM
    package_tb P
LEFT JOIN
    (
        SELECT 
            package_idx, 
            SUM(reservation_su) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR
ON
    P.PACKAGE_IDX = PR.package_idx
WHERE
    P.package_idx = #{arg0}


</select>
<select id="getDiscountPrice">
select
    ROUND(COALESCE(((100.0 - PD.DISCOUNT_PERCENT) / 100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price
from package_tb p
join package_discount_tb pd on p.package_idx = pd.package_idx
where p.package_idx = #{arg0}


</select>

<select id="getPackageDetailImgList">
select
    image
from package_image_tb
where package_idx =#{arg0}
</select>

<select id="getPackageList_Sub">
WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
)
SELECT 
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.PTYPE_IDX,
    P.HIT,
    P.PACKAGE_CATEGORY_IDX,
    PI.IMAGE,
    AR.rate,
    RC.count,
    PL.location_name,
    PCAT.category_name
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX

</select>

<select id="getPackageList_Search">
WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
)
SELECT 
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.PTYPE_IDX,
    P.HIT,
    P.PACKAGE_CATEGORY_IDX,
    PI.IMAGE,
    AR.rate,
    RC.count,
    PL.location_name,
    PCAT.category_name,
    PD.DISCOUNT_PERCENT,
    PD.DISCOUNT_INTEGER,
    ROUND(COALESCE(( (100.0 - PD.DISCOUNT_PERCENT)/100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price,
    P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0) AS remaining_person
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX
LEFT JOIN 
    PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX
LEFT JOIN 
    (
        SELECT 
            package_idx, 
            COUNT(package_reservation_idx) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR ON P.PACKAGE_IDX = PR.package_idx
WHERE 
    LOWER(P.TITLE) LIKE '%' || LOWER(#{keyword}) || '%' 
    OR LOWER(P.DETAIL1) LIKE '%' || LOWER(#{keyword}) || '%' 
    OR LOWER(P.DETAIL2) LIKE '%' || LOWER(#{keyword}) || '%' 
    OR LOWER(P.DETAIL3) LIKE '%' || LOWER(#{keyword}) || '%'

</select>
<select id="getPrice">
select 
    case 
        when pd.discount_percent is not null 
        then TO_NUMBER(p.price) * (1 - pd.discount_percent / 100) 
        else TO_NUMBER(p.price)
    end as price
from 
    package_tb p
left join 
    package_discount_tb pd on p.package_idx = pd.package_idx 
where 
    p.package_idx = #{arg0}
</select>
<select id="getDate">
select 

    end_date - start_date as days_difference
from 
    package_tb
where 
    package_idx = #{arg0}

</select>
<select id="getImage">

select 
    pi.image
from package_image_tb pi
join package_tb p on pi.package_idx = p.package_idx
where p.package_idx=#{arg0}
and 
    rownum = 1
 
</select>
<select id="getCategory">
SELECT
	CATEGORY_IDX,
	NAME
FROM CATEGORY_TB	
</select>
<select id="getCategorybyCategory">
SELECT
	c.CATEGORY_IDX,
	c.NAME
FROM CATEGORY_TB c
join package_category_tb p
on c.category_idx = p.category_idx
where p.package_idx = #{arg0}
</select>
<select id="getLocation">
SELECT
	LOCATION_IDX,
    NAME
FROM LOCATION_TB

</select>
<select id="getLocationbyLocation">
SELECT
	l.LOCATION_IDX,
    l.NAME
FROM LOCATION_TB l
join package_location_tb p
on l.location_idx = p.location_idx
where p.package_idx =#{arg0}

</select>
<select id="getConvenienceList">

SELECT
	CONVENIENCE_IDX,
    NAME
FROM CONVENIENCE_TB

</select>
<select id="getConvenienceByConvenience">

SELECT
	c.CONVENIENCE_IDX,
    c.NAME
FROM CONVENIENCE_TB c
join package_convenience_tb p
on c.convenience_idx = p.convenience_idx
where p.package_idx = #{arg0}

</select>

<select id="getReservation_su">
SELECT
    (pt.limited_person - COALESCE(prt.total_reservation_su, 0)) AS available_slots
FROM
    package_tb pt
LEFT JOIN (
    SELECT
        package_idx,
        COALESCE(SUM(reservation_su), 0) AS total_reservation_su
    FROM
        package_reservation_tb
    GROUP BY
        package_idx
) prt ON pt.package_idx = prt.package_idx
WHERE
    pt.package_idx = #{arg0}

</select>


<select id="getConvenience">
SELECT
	C.CONVENIENCE_IDX,
	C.NAME
FROM  CONVENIENCE_TB C
JOIN  PACKAGE_CONVENIENCE_TB CB
ON    C.CONVENIENCE_IDX = CB.CONVENIENCE_IDX
WHERE CB.PACKAGE_IDX = #{param1}

</select>
<select id="getPeriodDate">
SELECT 
    CASE 
        WHEN TO_NUMBER(end_date - start_date) IS NULL OR TO_NUMBER(end_date - start_date) = 0 THEN '당일'
        ELSE TO_CHAR(TO_NUMBER(end_date - start_date))
    END AS duration
FROM 
    package_Tb
WHERE 
    package_idx = #{arg0}


</select>

<select id="getDateToString">

SELECT
    TO_CHAR(end_date, 'YY"년" MM"월" DD"일"') AS end_date,
    TO_CHAR(start_date, 'YY"년" MM"월" DD"일"') AS start_date
FROM package_tb
WHERE package_idx = #{arg0}
</select>

<select id="getPackage">
SELECT
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.DETAIL1,
    P.DETAIL2,
    P.DETAIL3,
    P.ZIP_CODE,
    P.ADDRESS1,
    P.ADDRESS2,
    P.PTYPE_IDX,
    P.HIT,
    P.PACKAGE_CATEGORY_IDX,
    (P.END_DATE - P.START_DATE) || '일간' AS DURATION
FROM PACKAGE_TB P
WHERE PACKAGE_IDX = #{param1}

</select>

<select id="getReviews">
SELECT
    R.PACKAGE_REVIEW_IDX,
    R.PACKAGE_IDX,
    R.CONTENT,
    R.PERSON_IDX,
    R.CREATED,
    P.FIRST_NAME || ' ' || P.LAST_NAME AS FULL_NAME,
    ra.rate,
	trim(listagg(pi.image, ', ') WITHIN GROUP (ORDER BY pi.image)) AS image
FROM package_tb pa
JOIN package_review_tb r ON pa.package_idx = r.package_idx
JOIN person_tb p ON r.person_idx = p.person_idx
JOIN package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
JOIN package_review_image_tb pi ON r.package_review_idx = pi.package_review_idx 
WHERE pa.package_idx = #{param1}
GROUP BY
    R.PACKAGE_REVIEW_IDX,
    R.PACKAGE_IDX,
    R.CONTENT,
    R.PERSON_IDX,
    R.CREATED,
    P.FIRST_NAME, 
    P.LAST_NAME,  
    ra.rate

</select>
<select id="getPersonIdx">
SELECT NVL(MAX(p.person_idx), 0) AS person_idx
FROM person_tb p
JOIN user_tb u ON p.user_idx = u.user_idx
WHERE p.user_idx = #{arg0}


</select>

<select id="getMaxReview">
WITH RankedReviews AS (
    SELECT
        R.PACKAGE_REVIEW_IDX,
        R.PACKAGE_IDX,
        R.CONTENT,
        R.PERSON_IDX,
        R.CREATED,
        P.FIRST_NAME || ' ' || P.LAST_NAME AS FULL_NAME,
        ra.rate,
        TRIM(LISTAGG(pi.image, ', ') WITHIN GROUP (ORDER BY pi.image)) AS image,
        ROW_NUMBER() OVER (PARTITION BY r.package_idx ORDER BY ra.rate DESC) AS rn
    FROM package_tb pa
    JOIN package_review_tb r ON pa.package_idx = r.package_idx
    JOIN person_tb p ON r.person_idx = p.person_idx
    JOIN package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    JOIN package_review_image_tb pi ON r.package_review_idx = pi.package_review_idx 
    WHERE pa.package_idx = #{param1}
    GROUP BY
        R.PACKAGE_REVIEW_IDX,
        R.PACKAGE_IDX,
        R.CONTENT,
        R.PERSON_IDX,
        R.CREATED,
        P.FIRST_NAME, 
        P.LAST_NAME,  
        ra.rate
)
SELECT
    PACKAGE_REVIEW_IDX,
    PACKAGE_IDX,
    CONTENT,
    PERSON_IDX,
    CREATED,
    FULL_NAME,
    rate,
    image
FROM RankedReviews
WHERE rn = 1

</select>
<select id="getPackageDateTime">
SELECT
     to_char(start_date, 'MM"월 " DD"일 "HH"시 "mm"분 "') as start_time
FROM 
    package_tb
WHERE 
    package_idx = #{arg0}

</select>


<select id="getReviewCount">
SELECT COUNT(*) AS count
FROM package_tb pa
JOIN package_review_tb r ON pa.package_idx = r.package_idx
JOIN person_tb p ON r.person_idx = p.person_idx
JOIN package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
WHERE pa.package_idx = #{param1}


</select>


<select id="getAverageRate">
SELECT AVG(ra.rate) AS rate
FROM package_tb pa
JOIN package_review_tb r ON pa.package_idx = r.package_idx
JOIN person_tb p ON r.person_idx = p.person_idx
JOIN package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
WHERE pa.package_idx = #{param1}


</select>

<select id="getMaxRate">
SELECT MAX(ra.rate) AS rate
FROM package_tb pa
JOIN package_review_tb r ON pa.package_idx = r.package_idx
JOIN person_tb p ON r.person_idx = p.person_idx
JOIN package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
WHERE pa.package_idx = #{param1}



</select>

<select id="getPackageImg1">
SELECT PACKAGE_IMAGE_IDX, IMAGE
FROM (
    SELECT PACKAGE_IMAGE_IDX, IMAGE, ROWNUM AS RN
    FROM PACKAGE_IMAGE_TB
    WHERE PACKAGE_IDX = #{param1}
)
WHERE RN = 1
</select>
<select id="getPackageImg2">

SELECT PACKAGE_IMAGE_IDX, IMAGE
FROM (
    SELECT PACKAGE_IMAGE_IDX, IMAGE, ROWNUM AS RN
    FROM PACKAGE_IMAGE_TB
    WHERE PACKAGE_IDX =#{param1}
)
WHERE RN BETWEEN 2 AND 4
</select>
<select id="getPackageImg3">
SELECT
    PACKAGE_IMAGE_IDX,
    IMAGE
FROM PACKAGE_IMAGE_TB
WHERE PACKAGE_IDX =#{param1}

</select>

<select id="getPackageList_Sub_Category">
WITH AverageRates AS (
    SELECT 
        pa.package_idx,
        AVG(ra.rate) AS rate
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
ReviewCounts AS (
    SELECT 
        pa.package_idx,
        COUNT(*) AS count
    FROM 
        package_tb pa
    JOIN 
        package_review_tb r ON pa.package_idx = r.package_idx
    JOIN 
        person_tb p ON r.person_idx = p.person_idx
    JOIN 
        package_rate_tb ra ON r.package_review_idx = ra.package_review_idx
    GROUP BY 
        pa.package_idx
),
PackageImages AS (
    SELECT 
        PACKAGE_IDX,
        IMAGE,
        ROW_NUMBER() OVER (PARTITION BY PACKAGE_IDX ORDER BY IMAGE) AS RN
    FROM 
        PACKAGE_IMAGE_TB
),
PackageLocations AS (
    SELECT 
        pl.package_idx,
        l.name AS location_name,
        ROW_NUMBER() OVER (PARTITION BY pl.package_idx ORDER BY l.location_idx) AS rn
    FROM 
        package_location_tb pl
    JOIN 
        location_tb l ON pl.location_idx = l.location_idx
),
PackageCategories AS (
    SELECT 
        PC.PACKAGE_IDX,
        C.NAME AS CATEGORY_NAME,
        PC.CATEGORY_IDX,
        ROW_NUMBER() OVER (PARTITION BY PC.PACKAGE_IDX ORDER BY C.CATEGORY_IDX) AS RN
    FROM 
        CATEGORY_TB C
    JOIN 
        PACKAGE_CATEGORY_TB PC ON C.CATEGORY_IDX = PC.CATEGORY_IDX
)
SELECT 
    P.PACKAGE_IDX,
    P.USER_IDX,
    P.TITLE,
    P.START_DATE,
    P.END_DATE,
    P.LIMITED_PERSON,
    P.PRICE,
    P.PTYPE_IDX,
    P.HIT,
    P.PACKAGE_CATEGORY_IDX,
    PI.IMAGE,
    AR.rate,
    RC.count,
    PL.location_name,
    PCAT.category_name,
    PD.DISCOUNT_PERCENT,
    PD.DISCOUNT_INTEGER,
    ROUND(COALESCE(( (100.0 - PD.DISCOUNT_PERCENT)/100) * TO_NUMBER(REPLACE(P.PRICE, ',', '')), 0), -2) AS discounted_price,
    P.LIMITED_PERSON - COALESCE(PR.reserved_count, 0) AS remaining_person
FROM 
    PACKAGE_TB P
LEFT JOIN 
    PackageImages PI ON P.PACKAGE_IDX = PI.PACKAGE_IDX AND PI.RN = 1
LEFT JOIN 
    AverageRates AR ON P.PACKAGE_IDX = AR.package_idx
LEFT JOIN 
    ReviewCounts RC ON P.PACKAGE_IDX = RC.package_idx
LEFT JOIN 
    (SELECT package_idx, location_name FROM PackageLocations WHERE rn = 1) PL ON P.PACKAGE_IDX = PL.package_idx
LEFT JOIN 
    (SELECT PACKAGE_IDX, CATEGORY_NAME FROM PackageCategories WHERE RN = 1) PCAT ON P.PACKAGE_IDX = PCAT.PACKAGE_IDX
LEFT JOIN 
    PACKAGE_DISCOUNT_TB PD ON P.PACKAGE_IDX = PD.PACKAGE_IDX
LEFT JOIN 
    (
        SELECT 
            package_idx, 
            COUNT(package_reservation_idx) AS reserved_count
        FROM 
            package_reservation_tb
        GROUP BY 
            package_idx
    ) PR ON P.PACKAGE_IDX = PR.package_idx
WHERE 
    P.PACKAGE_IDX IN (SELECT PACKAGE_IDX FROM PACKAGE_CATEGORY_TB WHERE CATEGORY_IDX = #{category_idx})

</select>

<select id="getCategoryName">
select 
    name,
    category_idx
from category_tb
where category_idx=#{category_idx}

</select>


<select id="countPay">
select
    count(nvl(package_pay_idx,0)) 
from package_pay_tb
where user_idx=#{user_idx}

</select>


<select id="findByPersonIdx">
select
    person_idx
from person_tb p
join user_tb u on p.user_idx = u.user_idx
where u.user_idx=#{user_idx}
</select>

<!-- ====================================================================insert======================================================================= -->
<insert id="insertPackageReservation">

INSERT INTO package_reservation_tb (
    package_reservation_idx,
    user_idx,
    package_idx,
    reservation_su,
    reservation_price,
    state
) VALUES (
    (select nvl(max(PACKAGE_RESERVATION_IDX),0)+1
	from   package_reservation_tb),
    #{user_idx},
    #{package_idx},
    #{reservation_su},
    #{reservation_price},
    1
    
)

</insert>


<insert id="insertReview">

INSERT INTO PACKAGE_REVIEW_TB(
    PACKAGE_REVIEW_IDX,
    PACKAGE_IDX,
    CONTENT,
    PERSON_IDX,
    CREATED
)
VALUES(
    (SELECT MAX(NVL(PACKAGE_REVIEW_IDX,0))+1
    FROM   PACKAGE_REVIEW_TB),
    #{package_idx},
    #{content},
    #{person_idx},
    SYSDATE
)

</insert>


<insert id="insertReviewRaterate">
INSERT INTO PACKAGE_RATE_TB(
    PACKAGE_RATE_IDX,
    PACKAGE_REVIEW_IDX,
    USER_IDX,
    RATE
)
VALUES(
    (SELECT MAX(NVL(PACKAGE_RATE_IDX,0))+1
    FROM   PACKAGE_RATE_TB),
    (select
    MAX(PACKAGE_REVIEW_IDX)
	from PACKAGE_REVIEW_TB),
    #{arg0},
    #{arg1}
)

</insert>



<insert id="insertReviewimage">
   <foreach collection="list" item="imageList"
        index      = "i"  
        open       = "INSERT ALL"    
        close      = "SELECT * FROM DUAL"
        separator  = " " >
        INTO  PACKAGE_REVIEW_IMAGE_TB VALUES (
             GET_FILENUM_4(),
             (SELECT MAX(NVL(PACKAGE_REVIEW_IDX,0))FROM   PACKAGE_REVIEW_TB),
             #{ imageList.image }
        )
   </foreach>
</insert>


<insert id="insertPackage">

INSERT INTO package_tb (
    package_idx,
    user_idx,
    title,
    start_date,
    end_date,
    limited_person,
    price,
    detail1,
    detail2,
    detail3,
    zip_code,
    address1,
    address2

) VALUES (
    (select 
    nvl(max(package_idx),0)+1
from package_tb),
    #{user_idx},
    #{title},
    #{start_date},
    #{end_date},
    #{limited_person},
    #{price},
    #{detail1},
    #{detail2},
    #{detail3},
    #{zip_code},
    #{address1},
    #{address2}

)

</insert>


<insert id="insertPackageImg">
   <foreach collection="list" item="imageList"
        index      = "i"  
        open       = "INSERT ALL"    
        close      = "SELECT * FROM DUAL"
        separator  = " " >
        INTO  PACKAGE_IMAGE_TB VALUES (
             GET_FILENUM_1(),
             (SELECT MAX(NVL(PACKAGE_IDX,0))FROM   PACKAGE_TB),
             #{ imageList.image }
        )
   </foreach>
</insert>

<insert id="insertPackageCategory">
   <foreach collection="array" item="arg0"
        index      = "i"  
        open       = "INSERT ALL"    
        close      = "SELECT * FROM DUAL"
        separator  = " " >
        INTO  PACKAGE_CATEGORY_TB VALUES (
             GET_FILENUM_2(),
             (SELECT MAX(NVL(PACKAGE_IDX,0))FROM   PACKAGE_TB),
             #{arg0}
        )
   </foreach>
</insert>
<insert id="insertPackageLocation">
   <foreach collection="array" item="arg0"
        index      = "i"  
        open       = "INSERT ALL"    
        close      = "SELECT * FROM DUAL"
        separator  = " " >
        INTO  PACKAGE_LOCATION_TB VALUES (
             GET_FILENUM_3(),
             (SELECT MAX(NVL(PACKAGE_IDX,0))FROM   PACKAGE_TB),
             #{arg0}
        )
   </foreach>
</insert>


<insert id="insertPackageConvenience">
   <foreach collection="array" item="arg0"
        index      = "i"  
        open       = "INSERT ALL"    
        close      = "SELECT * FROM DUAL"
        separator  = " " >
        INTO  PACKAGE_CONVENIENCE_TB VALUES (
             GET_FILENUM_5(),
             (SELECT MAX(NVL(PACKAGE_IDX,0))FROM   PACKAGE_TB),
             #{arg0}
        )
   </foreach>
</insert>

<insert id="insertPackageDiscount">
INSERT INTO package_discount_tb (
    package_discount_idx,
    user_idx,
    package_idx,
    state,
    discount_percent,
    discount_integer
) VALUES (
    (SELECT MAX(NVL(PACKAGE_DISCOUNT_IDX,0)+1)FROM   PACKAGE_DISCOUNT_TB),
    #{arg0},
    (SELECT MAX(NVL(PACKAGE_IDX,0))FROM   PACKAGE_TB),
    2,
    #{arg1},
    #{arg2}
)

</insert>

<insert id="insertPackage_Reservation">
INSERT INTO package_reservation_tb (
    package_reservation_idx,
    user_idx,
    package_idx,
    reservation_su,
    reservation_price,
    state
) VALUES (
    (select nvl(max(PACKAGE_RESERVATION_IDX),0)+1
	from   package_reservation_tb),
    #{user_idx},
    #{package_idx},
    #{reservation_su},
    #{reservation_price},
    2
)
</insert>
<insert id="insertPackage_Payment">

INSERT INTO package_pay_tb (
    package_pay_idx,
    user_idx,
    package_reservation_idx,
    price,
    state
) VALUES (
    (SELECT NVL(MAX(PACKAGE_PAY_IDX),0)+1 FROM   PACKAGE_PAY_TB),
    #{user_idx},
    (SELECT MAX(NVL(PACKAGE_RESERVATION_IDX,0))FROM   PACKAGE_RESERVATION_TB),
    #{price},
    2
)



</insert>

<!-- update -->


<update id="package_incHit">
UPDATE PACKAGE_TB
  SET  HIT = hit + 1
 WHERE PACKAGE_IDX = #{package_idx} 
</update>


<update id="updatePackage">
	update package_tb
		set 
			title = #{title},
			start_date = #{start_date},
			end_date = #{end_date},
			limited_person = #{limited_person},
			price = #{price},
			detail1 = #{detail1},
			detail2 = #{detail2},
			detail3 = #{detail3},
			zip_code = #{zip_code},
			address1 = #{address1},
			address2 = #{address2}
	where package_idx = #{package_idx}
</update>
<!-- update -->

<delete id="deletePackageImg">
	delete from package_image_tb
	where package_idx = #{arg0}
</delete>
<delete id="deletePakcageCategory">
	delete from package_category_tb
	where package_idx = #{arg0}
</delete>
<delete id="deletePakcageConvenience">
	delete from package_convenience_tb
	where package_idx = #{arg0}
</delete>
<delete id="deletePakcageLocation">
	delete from package_location_tb
	where package_idx = #{arg0}
</delete>
<delete id="deletePakcageDiscount">
	delete from package_discount_tb
	where package_idx = #{arg0}

</delete>

<delete id="deletePakcageReview">
	delete from package_review_tb
	where package_review_idx =#{arg0}

</delete>


</mapper>