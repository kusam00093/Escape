<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.escape.accommodation.mapper.AccommodationMapper">

	<select id="search" resultType="com.escape.accommodation.domain.SearchResult">
	    SELECT NAME, ADDRESS1, ADDRESS2, 2 AS PRIORITY
	    FROM HOTEL_TB
	    WHERE NAME LIKE '%' || #{query} || '%'
	       OR ADDRESS1 LIKE '%' || #{query} || '%'
	       OR ADDRESS2 LIKE '%' || #{query} || '%'
	    UNION ALL
	    SELECT NAME, NULL AS ADDRESS1, NULL AS ADDRESS2, 1 AS PRIORITY
	    FROM CITY_TB
	    WHERE NAME LIKE '%' || #{query} || '%'
	    ORDER BY PRIORITY
	</select>

    <select id="searchHotels" resultType="com.escape.accommodation.domain.Hotel">
        SELECT HOTEL_IDX, NAME, ADDRESS1, ADDRESS2, DETAIL1, DETAIL2, DETAIL3, USER_IDX, PHONE, ZIP_CODE, HIT
        FROM HOTEL_TB
        WHERE 1=1
        <if test="place != null and place != ''">
            AND (
                ADDRESS1 LIKE '%' || #{place} || '%'
                OR ADDRESS2 LIKE '%' || #{place} || '%'
                OR NAME LIKE '%' || #{place} || '%'
            )
        </if>
    </select>
    
    <select id="getHotelPrice" resultType="map">
        SELECT 
            r.HOTEL_IDX, 
            r.LOWEST_PRICE,
            d.DISCOUNT_RATE, 
            d.DISCOUNT_AMOUNT
        FROM 
            (SELECT 
                HOTEL_IDX, 
                MIN(PRICE) AS LOWEST_PRICE
            FROM 
                ROOM_TB
            GROUP BY 
                HOTEL_IDX) r
        LEFT JOIN 
            ROOM_TB rt ON r.HOTEL_IDX = rt.HOTEL_IDX AND r.LOWEST_PRICE = rt.PRICE
        LEFT JOIN 
            ROOM_DISCOUNT_TB d ON rt.ROOM_IDX = d.ROOM_IDX
    </select>
    
    <select id="getHotelImages" resultType="String">
    	SELECT 
    		IMAGE_PATH
    	FROM
    		HOTEL_IMAGE_TB
    	WHERE
    		HOTEL_IDX = #{hotel_idx}  	
    </select>
    
    <select id="getHotelById" parameterType="int">
        SELECT *
        FROM HOTEL_TB
        WHERE HOTEL_IDX = #{hotel_idx}
    </select>
    
    <select id="getRoomPricesWithDiscounts" resultType="map">
	    SELECT
	        r.ROOM_IDX,
	        r.PRICE,
	        rd.DISCOUNT_RATE,
	        rd.DISCOUNT_AMOUNT
	    FROM
	        ROOM_TB r
	    LEFT JOIN
	        ROOM_DISCOUNT_TB rd ON r.ROOM_IDX = rd.ROOM_IDX
	    WHERE
	        r.HOTEL_IDX = #{hotel_idx}
	</select>
    
    
    <select id="getHotelFacilities" parameterType="int" resultType="Map">
        SELECT 
        	hf.HOTEL_IDX,
            f.NAME
        FROM facility_tb f
        JOIN HOTEL_FACILITY_TB hf ON f.FACILITY_IDX = hf.FACILITY_IDX
        WHERE hf.hotel_idx = #{hotel_idx}
    </select>
    
    <select id="getRoomsByHotelId" parameterType="int" resultType="com.escape.accommodation.domain.Room">
        SELECT * FROM room_tb WHERE hotel_idx = #{hotelIdx}
    </select>
    
    <select id="getRoomById" parameterType="int" resultType="com.escape.accommodation.domain.Room">
	    SELECT *
	    FROM room_tb
	    WHERE room_idx = #{room_idx}
	</select>

	<select id="getPointsByPersonIdx" parameterType="int" resultType="int">
	    SELECT point
	    FROM point_tb
	    WHERE person_idx = #{person_idx}
	</select>
	
	<update id="usePoints" parameterType="map">
	    UPDATE point_tb
	    SET point = point - #{pointsToUse}
	    WHERE person_idx = #{person_idx} AND point >= #{pointsToUse}
	</update>

	<insert id="insertRoomReservation" parameterType="com.escape.accommodation.domain.RoomReservation" useGeneratedKeys="true" keyProperty="room_reservation_idx" keyColumn="ROOM_RESERVATION_IDX">
	    INSERT INTO ROOM_RESERVATION_TB 
	    (ROOM_RESERVATION_IDX, USER_IDX, ROOM_IDX, RESERVATION_GUEST, RESERVATION_PRICE, CHECK_IN_DATE, CHECK_OUT_DATE, STATE, CREATED) 
	    VALUES 
	    (ROOM_RESERVATION_SEQ.NEXTVAL, #{user_idx}, #{room_idx}, #{reservation_guest}, #{reservation_price}, TO_DATE(#{check_in_date}, 'YYYY-MM-DD'), TO_DATE(#{check_out_date}, 'YYYY-MM-DD'), #{state}, SYSDATE)
	</insert>
	
	<insert id="insertPayment" parameterType="com.escape.accommodation.domain.Payment">
	    INSERT INTO ROOM_PAY_TB 
	    (ROOM_PAY_IDX, USER_IDX, ROOM_RESERVATION_IDX, PRICE, STATE, CREATED) 
	    VALUES 
	    (ROOM_PAY_SEQ.NEXTVAL, #{user_idx}, #{room_reservation_idx}, #{price}, #{state}, SYSDATE)
	</insert>

    <!-- 특정 날짜에 객실 이용 가능 여부 확인 -->
    <!-- 가용 객실 수 확인 -->
    <select id="checkAvailableRooms" parameterType="map" resultType="int">
        <![CDATA[
	    SELECT AVAILABLE_ROOMS - (
	        SELECT COUNT(*)
	        FROM ROOM_RESERVATION_TB
	        WHERE ROOM_IDX = #{room_idx}
	        AND (
	            (CHECK_IN_DATE <= TO_DATE(#{check_out_date}, 'YYYY-MM-DD') AND CHECK_OUT_DATE >= TO_DATE(#{check_in_date}, 'YYYY-MM-DD'))
	        )
	    ) AS AVAILABLE_ROOMS
	    FROM ROOM_TB
	    WHERE ROOM_IDX = #{room_idx}
        ]]>
    </select>

    <!-- 예약 성공 시 객실 수 감소 -->
    <update id="updateAvailableRooms" parameterType="map">
        <![CDATA[
        UPDATE ROOM_TB
        SET AVAILABLE_ROOMS = (
            SELECT AVAILABLE_ROOMS - 1
            FROM ROOM_TB
            WHERE ROOM_IDX = #{room_idx}
        )
        WHERE ROOM_IDX = #{room_idx}
        AND EXISTS (
            SELECT 1
            FROM ROOM_RESERVATION_TB
            WHERE ROOM_IDX = #{room_idx}
            AND (CHECK_IN_DATE < TO_DATE(#{check_out_date}, 'YYYY-MM-DD')
            AND CHECK_OUT_DATE > TO_DATE(#{check_in_date}, 'YYYY-MM-DD'))
        )
        ]]>
    </update>
    
     <select id="countSellersByUserIdx" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM SELLER_TB 
        WHERE USER_IDX = #{userIdx}
    </select>
    
    <insert id="insertHotelImage">
        INSERT INTO HOTEL_IMAGE_TB (HOTEL_IDX, IMAGE, IMAGE_PATH)
        VALUES (#{hotelIdx}, #{image}, #{imagePath})
    </insert>
    

    <insert id="insertBookmark">
        INSERT INTO HOTEL_BOOKMARK_TB (HOTEL_BOOKMARK_IDX, USER_IDX, HOTEL_IDX, STATE, CREATED)
        VALUES (HOTEL_BOOKMARK_SEQ.NEXTVAL, #{userIdx}, #{hotelIdx}, #{state}, SYSDATE)
    </insert>

    <delete id="deleteBookmark">
        DELETE FROM HOTEL_BOOKMARK_TB 
        WHERE USER_IDX = #{userIdx} 
        AND HOTEL_IDX = #{hotelIdx}
    </delete>

    <select id="getTotalBookmarks" resultType="int">
        SELECT COUNT(*) 
        FROM HOTEL_BOOKMARK_TB 
        WHERE HOTEL_IDX = #{hotelId}
    </select>

    <select id="isBookmarkedByUser" resultType="int">
        SELECT COUNT(*) 
        FROM HOTEL_BOOKMARK_TB 
        WHERE USER_IDX = #{userIdx} 
        AND HOTEL_IDX = #{hotelId}
    </select>
    
    <select id="getAverageRateAndCount" resultType="Map">
        SELECT AVG(R.RATE) as averageRate, COUNT(R.RATE) as totalRatings
        FROM HOTEL_RATE_TB R
        JOIN HOTEL_REVIEW_TB RV ON R.HOTEL_REVIEW_IDX = RV.HOTEL_REVIEW_IDX
        WHERE RV.HOTEL_IDX = #{hotelIdx}
    </select>
    
	<select id="getRateDistribution" resultType="map">
	    SELECT RATE, CAST(COUNT(*) AS INTEGER) AS count
	    FROM HOTEL_RATE_TB
	    WHERE HOTEL_REVIEW_IDX IN (
	        SELECT HOTEL_REVIEW_IDX
	        FROM HOTEL_REVIEW_TB
	        WHERE HOTEL_IDX = #{hotelIdx}
	    )
	    GROUP BY RATE
	</select>
	
	<select id="getTopReviewOptions" resultType="java.util.HashMap">
	    <![CDATA[
	    SELECT * FROM (
	        SELECT NAME, count, IMAGE_URL FROM (
	            SELECT o.NAME, COUNT(hro.OPTION_IDX) AS count, o.IMAGE_URL
	            FROM HOTEL_REVIEW_OPTION hro
	            JOIN OPTION_TB o ON hro.OPTION_IDX = o.OPTION_IDX
	            JOIN HOTEL_REVIEW_TB hr ON hro.HOTEL_REVIEW_IDX = hr.HOTEL_REVIEW_IDX
	            WHERE hr.HOTEL_IDX = #{hotelIdx}
	            GROUP BY o.NAME, o.IMAGE_URL
	            ORDER BY COUNT(hro.OPTION_IDX) DESC
	        ) WHERE ROWNUM <= 3
	    )
	    ]]>
	</select>

	<select id="getReviewsWithDetails" resultType="java.util.HashMap">
	    SELECT hr.HOTEL_REVIEW_IDX, hr.CONTENT, hr.CREATED, hr.PERSON_IDX, hr.HOTEL_IDX,
	           p.LAST_NAME || ' ' || p.FIRST_NAME AS PERSON_NAME,
	           LISTAGG(DISTINCT o.NAME, ',') WITHIN GROUP (ORDER BY o.NAME) AS OPTIONS,
	           LISTAGG(DISTINCT hri.IMAGE, ',') WITHIN GROUP (ORDER BY hri.IMAGE) AS REVIEW_IMAGES,
	           NVL(AVG(hotel_rate.RATE), 0) AS AVG_RATE
	    FROM HOTEL_REVIEW_TB hr
	    LEFT JOIN HOTEL_REVIEW_OPTION hro ON hr.HOTEL_REVIEW_IDX = hro.HOTEL_REVIEW_IDX
	    LEFT JOIN OPTION_TB o ON hro.OPTION_IDX = o.OPTION_IDX
	    LEFT JOIN HOTEL_REVIEW_IMAGE_TB hri ON hr.HOTEL_REVIEW_IDX = hri.HOTEL_REVIEW_IDX
	    LEFT JOIN PERSON_TB p ON hr.PERSON_IDX = p.PERSON_IDX
	    LEFT JOIN HOTEL_RATE_TB hotel_rate ON hr.HOTEL_REVIEW_IDX = hotel_rate.HOTEL_REVIEW_IDX
	    WHERE hr.HOTEL_IDX = #{hotelIdx}
	    GROUP BY hr.HOTEL_REVIEW_IDX, hr.CONTENT, hr.CREATED, hr.PERSON_IDX, hr.HOTEL_IDX, p.LAST_NAME, p.FIRST_NAME
	    ORDER BY hr.CREATED DESC
	</select>
	
	<select id="getReviewsWithDetailsApi" resultType="java.util.HashMap">
	    SELECT hr.HOTEL_REVIEW_IDX, hr.CONTENT, hr.CREATED, hr.PERSON_IDX, hr.HOTEL_IDX,
	           p.LAST_NAME || p.FIRST_NAME AS PERSON_NAME,
	           LISTAGG(o.NAME, ',') WITHIN GROUP (ORDER BY o.NAME) AS OPTIONS,
	           (
	               SELECT LISTAGG(hri.IMAGE, ',') WITHIN GROUP (ORDER BY hri.IMAGE)
	               FROM HOTEL_REVIEW_IMAGE_TB hri
	               WHERE hri.HOTEL_REVIEW_IDX = hr.HOTEL_REVIEW_IDX
	           ) AS REVIEW_IMAGES,
	           COALESCE(hr_rate.TOTAL_RATE, 0) AS TOTAL_RATE
	    FROM HOTEL_REVIEW_TB hr
	    LEFT JOIN HOTEL_REVIEW_OPTION hro ON hr.HOTEL_REVIEW_IDX = hro.HOTEL_REVIEW_IDX
	    LEFT JOIN OPTION_TB o ON hro.OPTION_IDX = o.OPTION_IDX
	    LEFT JOIN PERSON_TB p ON hr.PERSON_IDX = p.PERSON_IDX
	    LEFT JOIN (
	        SELECT HOTEL_REVIEW_IDX, AVG(RATE) AS TOTAL_RATE
	        FROM HOTEL_RATE_TB
	        GROUP BY HOTEL_REVIEW_IDX
	    ) hr_rate ON hr.HOTEL_REVIEW_IDX = hr_rate.HOTEL_REVIEW_IDX
	    WHERE hr.HOTEL_IDX = #{hotelIdx}
	    GROUP BY hr.HOTEL_REVIEW_IDX, hr.CONTENT, hr.CREATED, hr.PERSON_IDX, hr.HOTEL_IDX, p.LAST_NAME, p.FIRST_NAME, hr_rate.TOTAL_RATE
	    ORDER BY
	    <choose>
	        <when test="orderBy == 'latest'">
	            hr.CREATED DESC
	        </when>
	        <when test="orderBy == 'highRating'">
	            TOTAL_RATE DESC
	        </when>
	        <when test="orderBy == 'lowRating'">
	            TOTAL_RATE ASC
	        </when>
	        <otherwise>
	            hr.CREATED DESC
	        </otherwise>
	    </choose>
	</select>
    
	<select id="hotelsFiltering" resultType="java.util.HashMap">
	    SELECT h.HOTEL_IDX, h.NAME, h.ADDRESS, h.PRICE, hr.AVG_RATE,
	           LISTAGG(hi.IMAGE, ',') WITHIN GROUP (ORDER BY hi.IMAGE) AS IMAGES
	    FROM HOTEL_TB h
	    LEFT JOIN (
	        SELECT HOTEL_IDX, AVG(RATE) AS AVG_RATE
	        FROM HOTEL_RATE_TB
	        GROUP BY HOTEL_IDX
	    ) hr ON h.HOTEL_IDX = hr.HOTEL_IDX
	    LEFT JOIN HOTEL_IMAGE_TB hi ON h.HOTEL_IDX = hi.HOTEL_IDX
	    WHERE 1=1
	    <if test="minPrice != null">
	        AND h.PRICE &gt;= #{minPrice}
	    </if>
	    <if test="maxPrice != null">
	        AND h.PRICE &lt;= #{maxPrice}
	    </if>
	    <if test="minRating != null">
	        AND hr.AVG_RATE &gt;= #{minRating}
	    </if>
	    <if test="maxRating != null">
	        AND hr.AVG_RATE &lt;= #{maxRating}
	    </if>
	    GROUP BY h.HOTEL_IDX, h.NAME, h.ADDRESS, h.PRICE, hr.AVG_RATE
	    <![CDATA[
	    ORDER BY
	    <choose>
	        <when test="orderBy == 'price_asc'">
	            h.PRICE ASC
	        </when>
	        <when test="orderBy == 'price_desc'">
	            h.PRICE DESC
	        </when>
	        <when test="orderBy == 'discount_rate_desc'">
	            hr.AVG_RATE DESC
	        </when>
	        <otherwise>
	            h.NAME ASC
	        </otherwise>
	    </choose>
	    ]]>
	</select>
	
</mapper>